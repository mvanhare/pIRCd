link services.example.org {
    /* Allow incoming link request originating from this host. */
    incoming {
        mask {
            127.0.0.1;
        }
    }
    auth {
        password linklink;
        }
    class servers;
}


link server2.example.org {
    /* Outgoing connection to server 127.0.0.1:6900 */
    outgoing {
        host 127.0.0.1;
        port 6900;
        options {
            /*
            * Uses TLS to connect to the remote server.
            * Make sure the remote server and port are listening for TLS connections.
            */
            tls;

            /* Auto connect attempts are made in semi-random intervals. */
            autoconnect;
        }
    }

    /*
    * In the auth block you can set specific requirements for incoming links.
    * password:     Authorisation based on unsecure plain text password.
                    This password will also be sent to outgoing links and checked on the other side.
    * fingerprint:  Authorisation based on certificate fingerprint.
                    Run "ircd.py --certfp" to see your certificate fingerprint and give it to the other side.
    * common-name:  Authorisation based on certificate CN.
                    If your CN contains spaces, make sure to replace them with underscores.
                    Run "ircd.py --certcn" to see your certificate CN and give it to the other side.
    *
    * If you combine multiple methods, all methods will be checked and must be valid.
    */
    auth {
        password legacypassword;
        fingerprint 1fd5776df0eb43a06445a1038a2859071f7fe162c475adb2c5deae0e3a3a1db0;
        common-name "valid.common.name";
        }

    /*
    * The class that this connection will be placed in.
    * Must be a class defined in a class { } block.
    */
    class servers;
}
